program IDENTIFIER CONSTANT decl simple_type list_type type stmt simplestmt assignstmt condexpr expression term factor iostmt structstmt condstmt seqstmt condition relation
. type num bool sent list < > = == <= >= maybe then whatever + - * / % ( ) cond : end orcond fall seq from to with x y z maxim 0 1 listen speak isPrime nah yea nr kick i half
program
program -> decl . | stmt . | decl . program | stmt . program
decl -> type IDENTIFIER
type -> simple_type | list_type
simple_type -> num | bool | sent
list_type -> list < simple_type >
stmt -> simplestmt | structstmt
simplestmt -> assignstmt | iostmt | kick
assignstmt -> IDENTIFIER = expression | IDENTIFIER = condexpr
condexpr -> maybe condition then expression whatever expression
expression -> term | term + expression | term - expression
term -> factor | factor * term | factor / term | factor % term
factor -> ( expression ) | IDENTIFIER | CONSTANT
iostmt -> listen ( IDENTIFIER ) | speak ( IDENTIFIER )
structstmt -> condstmt | seqstmt
condstmt -> cond condition : program end orcond : program end fall : program end | cond condition : program end orcond : program | cond condition : program end
seqstmt -> seq IDENTIFIER from expression to expression with assignstmt : program end
condition -> expression relation expression
relation -> < | <= | == | != | >= | >
IDENTIFIER -> x | y | z | maxim | nr | isPrime | i | half
CONSTANT -> 0 | 1 | yea | nah